import { Cross } from 'lucide-react';
import { useState, useEffect } from 'react';
import Button from '../button/Button';
import { motion } from 'motion/react';
import { useAppStateContext } from '../../context/AppStateContext';
import { cn } from '../../utils/cn';
import DetailedAnalysisIconComponent from './DetailedAnalysisIconComponent';
import DetailedAnalysisCollapsible from './DetailedAnalysisCollapsible';
import { BACKEND_URL } from '../../config/env';
import { io } from 'socket.io-client';

interface Step {
  title: string;
  content: string;
  locked: boolean;
  loading: boolean;
  open: boolean;
}

const DetailedAnalysis = () => {
  const { setAppState } = useAppStateContext();

  const stepsArray: Array<Step> = [
    {
      title: 'Gathering Patient Info',
      content: 'Form to gather patient information',
      locked: true,
      loading: true,
      open: false,
    },
    {
      title: 'Organize Details',
      content: 'Section to organize patient details',
      locked: true,
      loading: false,
      open: false,
    },
    {
      title: 'Scan Documents',
      content: 'Section to scan and upload documents',
      locked: true,
      loading: false,
      open: false,
    },
    {
      title: 'Find Discrepancies',
      content: 'Section to identify discrepancies',
      locked: true,
      loading: false,
      open: false,
    },
  ];
  const [steps, setSteps] = useState<Array<Step>>(stepsArray);
  useEffect(() => {
    const socket = io(`${BACKEND_URL}`, {
      transports: ['websocket'],
      path: '/socket/connect',
    });
    setAppState((prev) => ({ ...prev, socketConnection: socket }));
    socket.emit('timeoutStart', 'Timeout has started');
    socket.on('index', (index) => {
      const newSteps = [...steps];
      newSteps[index].locked = false;
      newSteps[index].loading = false;
      newSteps[index].open = true;
      if (index < steps.length - 1) newSteps[index + 1].loading = true;
      setSteps(newSteps);
    });
    return () => {
      socket.disconnect();
      setAppState((prev) => ({ ...prev, socketConnection: null }));
    };
  }, []);

  return (
    <motion.div
      className="w-1/2 max-h-screen ml-4 px-3 flex flex-col"
      initial={{ x: 100, opacity: 0 }}
      animate={{ x: 0, opacity: 1 }}
      exit={{ x: 100, opacity: 0 }}
      transition={{ duration: 0.4, ease: 'easeInOut' }}
    >
      {' '}
      <div className="bg-white w-full rounded-xl p-3 h-4/5  drop-shadow-2xl border border-gray-500/50 flex flex-col">
        <div className="flex justify-between items-center mb-2">
          <h2 className="text-2xl font-bold mb-4">
            Detailed Analysis
            <span className="text-sm font-medium text-gray-500">
              {' '}
              Generated by AI
            </span>
          </h2>
          <span
            className="rotate-45 cursor-pointer bg-blue-400 rounded-full p-2 hover:bg-blue-500 active:bg-blue-600 duration-75 ease-in-out transition-colors self-start"
            onClick={() => setAppState((prev) => ({ ...prev, scanner: false }))}
          >
            <Cross className="text-white " />
          </span>
        </div>

        <div className="flex flex-col h-full">
          <div className="space-y-7">
            {steps.map((step: Step, index: number) => (
              <div key={index}>
                <Button
                  className={cn(
                    'w-full text-left px-4 py-4 flex gap-2 text-white ',
                    {
                      'bg-blue-500': !step.locked,
                      'bg-blue-300 ': step.locked,
                      'rounded-md': !step.open,
                      'rounded-t-md': step.open,
                    }
                  )}
                  onClick={() => {
                    if (step.loading || step.locked) return;
                    const newSteps = [...steps];
                    newSteps[index].open = !newSteps[index].open;
                    setSteps(newSteps);
                  }}
                >
                  <DetailedAnalysisIconComponent
                    loading={step.loading}
                    open={step.open}
                  />
                  {step.title}
                </Button>

                {/* The collapsible info component for each step card */}
                <DetailedAnalysisCollapsible
                  key={index}
                  content={step.content}
                  open={step.open}
                />
              </div>
            ))}
          </div>
        </div>
      </div>
    </motion.div>
  );
};

export default DetailedAnalysis;
